import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

type Article = {
  source: {
    id: string;
    name: string;
  };
  author: string;
  title: string;
  description: string;
  url: string;
  urlToImage: string;
  publishedAt: string;
  content: string;
};

type Error = {
  code: string;
  message: string;
  status: string;
};

export interface ArticlesState {
  entities: Article[];
  loading: boolean;
  error: Error | null;
}

const initialState: ArticlesState = {
  entities: [],
  loading: false,
  error: null,
};

export const fetchArticles = createAsyncThunk(
  'articles/fetchArticles',
  async (token:string) => {
    try {
      const response = await fetch(
        `https://newsapi.org/v2/everything?q=keyword&apiKey=${token}`,
      );
      return await response.json();
    } catch (error) {
      return error;
    }
  },
);

export const newsSlice = createSlice({
  name: 'articles',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setArticles: (state, action: PayloadAction<Article[]>) => {
      state.entities = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchArticles.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchArticles.fulfilled, (state, action) => {
        if (action.payload.status === 'ok') {
          state.entities = action.payload.articles;
          state.error = null;
        } else {
          state.entities = [];
          state.error = {
            code: action.payload.code,
            message: action.payload.message,
            status: action.payload.status,
          };
        }
        state.loading = false;
      })
      .addCase(fetchArticles.rejected, (state) => {
        state.loading = false;
        state.entities = [];
        state.error = {
          code: '500',
          message: 'Internal Error',
          status: 'Failed',
        };
      });
  },
});

export const selectArticles = (state: RootState) => state.news.entities;
export const selectLoading = (state: RootState) => state.news.loading;
export const selectError = (state: RootState) => state.news.error;

export default newsSlice.reducer;
